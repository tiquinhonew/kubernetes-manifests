# cert-manager-install.yaml
# Instalação completa do cert-manager para ambiente baremetal

---
# 1. Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    name: cert-manager

---
# 2. ClusterIssuer para Let's Encrypt (Staging - para testes)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    # URL do servidor ACME staging
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: douglas@purplebit.com.br
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx
      selector: {}

---
# 3. ClusterIssuer para Let's Encrypt (Production)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # URL do servidor ACME production
    server: https://acme-v02.api.letsencrypt.org/directory
    email: douglas@purplebit.com.br
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
      selector: {}

---
# 4. Self-signed ClusterIssuer (para certificados internos/desenvolvimento)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-issuer
spec:
  selfSigned: {}

---
# 5. CA ClusterIssuer (para criar sua própria CA)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-selfsigned-ca
  namespace: cert-manager
spec:
  secretName: root-secret
  isCA: true
  commonName: my-ca
  subject:
    organizationalUnits:
      - "Development"
    organizations:
      - "PurpleBit"
    countries:
      - "BR"
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-issuer
    kind: ClusterIssuer

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: my-ca-issuer
spec:
  ca:
    secretName: root-secret